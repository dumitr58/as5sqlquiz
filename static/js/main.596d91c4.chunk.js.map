{"version":3,"sources":["components/quizData.js","components/custom-button/custom-button.component.jsx","components/MainQuiz.js","App.js","serviceWorker.js","index.js"],"names":["quizData","id","question","options","answer","CustomButton","children","isGoogleSignIn","inverted","otherProps","className","MainQuiz","state","currentQuestion","myAnswer","score","disabled","isEnd","loadQuizData","setState","questions","nextQuestionHandler","console","log","checkAnswer","finishHandler","length","this","prevProps","prevState","onClick","window","location","reload","map","item","index","key","option","React","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gRAAaA,EAAW,CACpB,CACEC,GAAI,EACJC,SAAS,iJACTC,QAAS,CAAC,+BAAD,2CACTC,OAAO,gCAET,CACEH,GAAI,EACJC,SAAS,iMACTC,QAAS,CAAC,WAAD,0DACTC,OAAO,uBAET,CACEH,GAAI,EACJC,SAAS,uMACTC,QAAS,CAAC,kBAAD,wDACTC,OAAO,oBAET,CACEH,GAAI,EACJC,SAAS,uNACTC,QAAS,CAAC,YAAD,6CACTC,OAAO,iBAET,CACIH,GAAI,EACJC,SAAS,wCACTC,QAAS,CAAC,oBAAD,0EACTC,OAAO,oBAEX,CACIH,GAAI,EACJC,SAAS,gLACTC,QAAS,CAAC,sBAAD,qEACTC,OAAO,uBAEX,CACIH,GAAI,EACJC,SAAS,wDACTC,QAAS,CAAC,sDAAD,mEACTC,OAAO,e,OC7BAC,G,MARM,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,eAAgBC,EAA7B,EAA6BA,SAAaC,EAA1C,+DAEjB,0CAAQC,UAAS,UAAKF,EAAW,WAAa,GAA7B,YAAmCD,EAAiB,iBAAkB,GAAtE,mBACZE,GACAH,KC2HMK,E,4MA7HbC,MAAQ,CACNC,gBAAiB,EACjBC,SAAU,KACVX,QAAS,GACTY,MAAO,EACPC,UAAU,EACVC,OAAO,G,EAGTC,aAAe,WAEb,EAAKC,UAAS,WACZ,MAAO,CACLC,UAAWpB,EAAS,EAAKY,MAAMC,iBAAiBX,SAChDE,OAAQJ,EAAS,EAAKY,MAAMC,iBAAiBT,OAC7CD,QAASH,EAAS,EAAKY,MAAMC,iBAAiBV,a,EAQpDkB,oBAAsB,WAAM,MAEU,EAAKT,MAAjCE,EAFkB,EAElBA,SAAUV,EAFQ,EAERA,OAAQW,EAFA,EAEAA,MAEtBD,IAAaV,GACf,EAAKe,SAAS,CACZJ,MAAOA,EAAQ,IAInB,EAAKI,SAAS,CACZN,gBAAiB,EAAKD,MAAMC,gBAAkB,IAEhDS,QAAQC,IAAI,EAAKX,MAAMC,kB,EAgBzBW,YAAc,SAAApB,GACZ,EAAKe,SAAS,CAAEL,SAAUV,EAAQY,UAAU,K,EAE9CS,cAAgB,WACV,EAAKb,MAAMC,kBAAoBb,EAAS0B,OAAS,GACnD,EAAKP,SAAS,CACZF,OAAO,K,kEArCXU,KAAKT,iB,yCAkBYU,EAAWC,GAAY,IAAD,OACnCF,KAAKf,MAAMC,kBAAoBgB,EAAUhB,iBAC3Cc,KAAKR,UAAS,WACZ,MAAO,CACLH,UAAU,EACVI,UAAWpB,EAAS,EAAKY,MAAMC,iBAAiBX,SAChDC,QAASH,EAAS,EAAKY,MAAMC,iBAAiBV,QAC9CC,OAAQJ,EAAS,EAAKY,MAAMC,iBAAiBT,a,+BAgB3C,IAAD,SAC+CuB,KAAKf,MAAnDT,EADD,EACCA,QAASW,EADV,EACUA,SAAUD,EADpB,EACoBA,gBAM3B,OAPO,EACqCI,MAQxC,yBAAKP,UAAU,UACb,uDAA6BiB,KAAKf,MAAMG,MAAxC,oBACA,kBAAC,EAAD,CAAce,QARpB,WACEC,OAAOC,SAASC,QAAO,KAOnB,aACA,wEAEE,4BACGjC,EAASkC,KAAI,SAACC,EAAMC,GAAP,OACZ,wBAAI1B,UAAU,8BAA8B2B,IAAKD,GAAjD,aACaD,EAAKjC,SAChB,6BAFF,WAGWiC,EAAK/B,cASxB,yBAAKM,UAAU,OACb,4BAAKiB,KAAKf,MAAMQ,UAAhB,KACA,kDAAoBP,EAApB,oBAA+Cb,EAAS0B,OACtD,EADF,gBAECvB,EAAQ+B,KAAI,SAAAI,GAAM,OACjB,uBACED,IAAKC,EAAOrC,GACZS,UAAS,gDACZI,IAAawB,EAAS,WAAa,KADvB,eAGTR,QAAS,kBAAM,EAAKN,YAAYc,KAE/BA,MAGJzB,EAAkBb,EAAS0B,OAAS,GACnC,kBAAC,EAAD,CACEV,SAAUW,KAAKf,MAAMI,SACrBc,QAASH,KAAKN,qBAFhB,QAQDR,IAAoBb,EAAS0B,OAAS,GACrC,kBAAC,EAAD,CAAcI,QAASH,KAAKF,eAA5B,e,GApHWc,IAAMC,WCSdC,MAVf,WACE,OACE,yBAAK/B,UAAU,OACb,oIACA,qDACE,kBAAC,EAAD,QCGYgC,QACW,cAA7BX,OAAOC,SAASW,UAEe,UAA7BZ,OAAOC,SAASW,UAEhBZ,OAAOC,SAASW,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.596d91c4.chunk.js","sourcesContent":["export const quizData = [\r\n    {\r\n      id: 1,\r\n      question: `The goal is to accelerate the federal government’s adoption of secure and effective cloud computing to reduce costs and improve services.`,\r\n      options: [`goal of the NIST CC document`, `Definition of CC`, `Both`, `None of above`],\r\n      answer: `goal of the NIST CC document`\r\n    },\r\n    {\r\n      id: 2,\r\n      question: `Refers to all of the processes and policies designed to protect an organization’s information systems from unauthorized access, use, disclosure, disruption, modification, or destruction`,\r\n      options: [`exposure`, `Vulnerability`, `Inormation Security`, `All of the Above`],\r\n      answer: `Inormation Security`\r\n    },\r\n    {\r\n      id: 3,\r\n      question: `occurs when the attacker watches another person’s computer screen over that person’s shoulder. Particularly dangerous in public areas such as airports,  commuter trains, and on airplanes`,\r\n      options: [`cyber-terrorism`, `shoulder surfing`, `cyber-warfare`, `None of the Above`],\r\n      answer: `shoulder surfing`\r\n    },\r\n    {\r\n      id: 4,\r\n      question: `would be the actions done by a nation or army to damage or defect the ability or other things of another country (i.e.: disabling the defense of the pentagon in order to stall military action of the USA in a war)`,\r\n      options: [`vandalism`, `warfare`, `cyber-terrorism`, `cyber-warfare` ],\r\n      answer: `cyber-warfare`\r\n    },\r\n    {\r\n        id: 5,\r\n        question: `Select Information Security Controls?`,\r\n        options: [`Physical controls`, `Access controls`, `Communications (network) Controls`, `All of the above` ],\r\n        answer: `All of the above`\r\n    },\r\n    {\r\n        id: 6,\r\n        question: `is an electronic document attached to a file certifying that the file is from the organization that it claims to be from and has not been modified from its original format. `,\r\n        options: [`digital certificate`, `certificate authorities`, `secure Socket Layer`, `None of the Above` ],\r\n        answer: `digital certificate`\r\n    },\r\n    {\r\n        id: 7,\r\n        question: `How do the big 4 auditing companies audit themselves?`,\r\n        options: [`They make a deal between themselves before auditing`, `They audit with their partners`, `They don't`, `None of the Above` ],\r\n        answer: `They don't`\r\n    }\r\n];","import React from 'react';\r\n\r\nimport './custom-button.styles.scss';\r\n\r\nconst CustomButton = ({ children, isGoogleSignIn, inverted, ...otherProps }) => \r\n(\r\n    <button className={`${inverted ? 'inverted' : ''} ${isGoogleSignIn ? 'google-sign-in': '' } custom-button`}\r\n     {...otherProps}> \r\n        {children}\r\n    </button>\r\n);\r\n\r\nexport default CustomButton;","import React from \"react\";\r\nimport { quizData } from \"./quizData\";\r\n\r\nimport CustomButton from './custom-button/custom-button.component';\r\n\r\nclass MainQuiz extends React.Component {\r\n  state = {\r\n    currentQuestion: 0,\r\n    myAnswer: null,\r\n    options: [],\r\n    score: 0,\r\n    disabled: true,\r\n    isEnd: false\r\n  };\r\n\r\n  loadQuizData = () => {\r\n    // console.log(quizData[0].question)\r\n    this.setState(() => {\r\n      return {\r\n        questions: quizData[this.state.currentQuestion].question,\r\n        answer: quizData[this.state.currentQuestion].answer,\r\n        options: quizData[this.state.currentQuestion].options\r\n      };\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loadQuizData();\r\n  }\r\n  nextQuestionHandler = () => {\r\n    // console.log('test')\r\n    const { myAnswer, answer, score } = this.state;\r\n\r\n    if (myAnswer === answer) {\r\n      this.setState({\r\n        score: score + 1\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      currentQuestion: this.state.currentQuestion + 1\r\n    });\r\n    console.log(this.state.currentQuestion);\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.currentQuestion !== prevState.currentQuestion) {\r\n      this.setState(() => {\r\n        return {\r\n          disabled: true,\r\n          questions: quizData[this.state.currentQuestion].question,\r\n          options: quizData[this.state.currentQuestion].options,\r\n          answer: quizData[this.state.currentQuestion].answer\r\n        };\r\n      });\r\n    }\r\n  }\r\n  //check answer\r\n  checkAnswer = answer => {\r\n    this.setState({ myAnswer: answer, disabled: false });\r\n  };\r\n  finishHandler = () => {\r\n    if (this.state.currentQuestion === quizData.length - 1) {\r\n      this.setState({\r\n        isEnd: true\r\n      });\r\n    }\r\n  };\r\n  render() {\r\n    const { options, myAnswer, currentQuestion, isEnd } = this.state;\r\n\r\n    function refreshPage() {\r\n      window.location.reload(false);\r\n    }\r\n\r\n    if (isEnd) {\r\n      return (\r\n        <div className=\"result\">\r\n          <h3>Game Over your score is {this.state.score} points out of 6</h3>\r\n          <CustomButton onClick={refreshPage}>Redo Quiz</CustomButton>\r\n          <p>\r\n            The correct answer's for the questions was\r\n            <ul>\r\n              {quizData.map((item, index) => (\r\n                <li className=\"ui floating message options\" key={index}>\r\n                  Question: {item.question}\r\n                  <br />\r\n                  Answer: {item.answer}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </p>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div className=\"App\">\r\n          <h1>{this.state.questions} </h1>\r\n          <span>{`Questions ${currentQuestion}  out of ${quizData.length -\r\n            1} remaining `}</span>\r\n          {options.map(option => (\r\n            <p\r\n              key={option.id}\r\n              className={`ui floating message options\r\n         ${myAnswer === option ? \"selected\" : null}\r\n         `}\r\n              onClick={() => this.checkAnswer(option)}\r\n            >\r\n              {option}\r\n            </p>\r\n          ))}\r\n          {currentQuestion < quizData.length - 1 && (\r\n            <CustomButton\r\n              disabled={this.state.disabled}\r\n              onClick={this.nextQuestionHandler}\r\n            >\r\n              Next\r\n            </CustomButton>\r\n          )}\r\n          {/* //adding a finish button */}\r\n          {currentQuestion === quizData.length - 1 && (\r\n            <CustomButton onClick={this.finishHandler}>\r\n              Finish\r\n            </CustomButton>\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default MainQuiz;","import React from 'react';\nimport './App.css';\nimport MainQuiz from './components/MainQuiz';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h2>Cloud Computing Final Quiz Preparations - using React and pulling json from Azure Cloud SQL Database</h2>\n      <h2>- Robert Dumitrescu -</h2>\n        <MainQuiz/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}